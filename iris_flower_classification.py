# -*- coding: utf-8 -*-
"""IRIS-FLOWER-CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cz2iTpSInu0cp-kuzaf-5G5o1VxL0T2W

<h1> IRIS-FLOWER-CLASSIFICATION<h1>
<h1>CodSoft-Data-Science-Internship-Task-3<h1>

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""Loading the Dataset"""

path = '/content/IRIS.csv'
data = pd.read_csv(path , encoding='latin-1')

"""Exploring the Dataset"""

data.head()

data.head

data.info()

data.info

data.shape

data.size

"""Cheking the Statistical Measure of the data"""

data.describe()

"""Cheking for missing values in the dataset"""

data.isnull().sum()

"""Spliting the Features and Target variables"""

# Split features and target variable
X = data.drop(columns=['species'])
y = data['species']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Standardizing Features"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""Training a K-Neasrest Neighbors(KNN) classifier"""

k = 3
knn_model = KNeighborsClassifier(n_neighbors=k)
knn_model.fit(X_train_scaled , y_train)

"""Making the predictions"""

y_pred = knn_model.predict(X_test_scaled)

"""Evaluating the model"""

print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

"""Visualizing the confusion matrix"""

plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap="YlGnBu", fmt='g', cbar=False)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""Cheking the accuracry score of the model"""

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

"""Cheking it with user define inputs"""

sepal_length = float(input("Enter sepal length: "))
sepal_width = float(input("Enter sepal width: "))
petal_length = float(input("Enter petal length: "))
petal_width = float(input("Enter petal width: "))

# Standardize the user input
user_input = scaler.transform([[sepal_length, sepal_width, petal_length, petal_width]])

# Predict the species
predicted_species = knn_model.predict(user_input)

print(f"Predicted species: {predicted_species[0]}")